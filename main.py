import os, asyncio, json, requests
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram import types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")  # —Ç–≤–æ–π backend (Railway)
# WEBAPP_URL –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: –±—É–¥–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å verification_link, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç –±—ç–∫–µ–Ω–¥

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

def get_demo_identity(user: types.User):
    # –î–µ—Ç–µ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö /start —É —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∏–º —Ç–æ—Ç –∂–µ email
    name = f"–†–µ—Å—Ç–æ—Ä–∞–Ω {user.first_name or user.id}"
    email = f"rest_{user.id}@example.com"
    return name, email

def get_verification_link(name: str, email: str) -> str | None:
    """
    –ü—Ä–æ—Å–∏–º —É –±—ç–∫–µ–Ω–¥–∞ —Å—Å—ã–ª–∫—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç token –∏ api).
    –ë—ç–∫–µ–Ω–¥ —Å–∞–º –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –≤–µ—Ä–Ω–µ—Ç 'Already registered' —Å —Ç–æ–π –∂–µ —Å—Å—ã–ª–∫–æ–π.
    """
    try:
        r = requests.post(
            f"{BACKEND_URL}/register_restaurant",
            params={"name": name, "email": email},
            timeout=10,
        )
        if r.status_code == 200:
            data = r.json()
            return data.get("verification_link")
        return None
    except Exception:
        return None

@dp.message(Command("start"))
async def start_cmd(m: Message):
    name, email = get_demo_identity(m.from_user)
    lk_url = get_verification_link(name, email)  # <-- —Ç—É—Ç —Ç—è–Ω–µ–º verification_link (—Å token + api)
    webapp_link = lk_url or "https://example.com"  # fallback, –µ—Å–ª–∏ –±—ç–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=webapp_link))],
        [InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (demo)", callback_data="reg_demo")]
    ])
    await m.answer(
        "üçΩ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Foody!\n–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –õ–ö –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        reply_markup=ikb
    )

@dp.callback_query(F.data == "reg_demo")
async def cb_reg(call: types.CallbackQuery):
    name, email = get_demo_identity(call.from_user)
    try:
        r = requests.post(
            f"{BACKEND_URL}/register_restaurant",
            params={"name": name, "email": email},
            timeout=10,
        )
        if r.status_code == 200:
            data = r.json()
            lk_url = data.get("verification_link")
            if lk_url:
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=lk_url))]
                ])
                await call.message.answer(f"–†–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ\nID: {data['restaurant_id']}", reply_markup=kb)
            else:
                await call.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ verification_link")
        else:
            await call.message.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {r.text}")
    except Exception as e:
        await call.message.answer(f"–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    await call.answer()

@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    # –µ—Å–ª–∏ –ø–æ–∑–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp —á–µ—Ä–µ–∑ tg.WebApp.sendData
    payload = json.loads(m.web_app_data.data)
    await m.answer(f"–ò–∑ –õ–ö –ø–æ–ª—É—á–µ–Ω–æ: {payload}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
