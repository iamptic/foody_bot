import os, asyncio, httpx
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
REG_WEBAPP_URL = os.getenv("REG_WEBAPP_URL", "http://localhost:5173")
BUYER_WEBAPP_URL = os.getenv("BUYER_WEBAPP_URL", "http://localhost:5174")
if not BOT_TOKEN: raise RuntimeError("‚ùå BOT_TOKEN is not set")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode="HTML")

class Reg(StatesGroup):
    waiting_name_new = State()

def buyer_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º", web_app=WebAppInfo(url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}"))
    ]])

def merchant_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë®‚Äçüç≥ –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=f"{REG_WEBAPP_URL}/index.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="üçΩ –≠–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", web_app=WebAppInfo(url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="settings_open")],
    ])

def settings_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="create_new_rest")],
        [InlineKeyboardButton(text="üîÄ –°–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="switch_rest")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (Mini App)", web_app=WebAppInfo(url=f"{REG_WEBAPP_URL}/onboarding.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])

@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    kb = buyer_menu()
    intro = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Foody</b>!\n–°–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º."
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{BACKEND_URL}/whoami", params={"telegram_id": m.from_user.id})
        if r.status_code == 200:
            data = r.json()
            kb = merchant_menu()
            intro = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{data.get('restaurant_name','—Ä–µ—Å—Ç–æ—Ä–∞–Ω')}</b>!\n–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–µ–Ω—é –∏ –±—Ä–æ–Ω—è–º–∏."
    except Exception:
        pass
    await m.answer(intro, reply_markup=kb)

@dp.message(Command("merchant"))
async def merchant(m: Message):
    await m.answer("–†–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:", reply_markup=merchant_menu())

@dp.callback_query(F.data == "settings_open")
async def settings_open(cb: CallbackQuery):
    await cb.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:", reply_markup=settings_menu())
    await cb.answer()

@dp.callback_query(F.data == "back_main")
async def back_main(cb: CallbackQuery):
    await cb.message.edit_text("–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:", reply_markup=merchant_menu())
    await cb.answer()

@dp.callback_query(F.data == "create_new_rest")
async def create_new_rest(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>:")
    await state.set_state(Reg.waiting_name_new)
    await cb.answer()

@dp.message(Reg.waiting_name_new)
async def reg_name_new(m: Message, state: FSMContext):
    name = (m.text or "").strip()[:120] or "–ú–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
    await m.answer("–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/register_telegram",
                                  params={"force_new": "true"},
                                  json={"name": name, "telegram_id": str(m.from_user.id)})
            r.raise_for_status()
            data = r.json()
        await m.answer(f"‚úÖ –°–æ–∑–¥–∞–Ω ¬´{data['restaurant_name']}¬ª (id {data['restaurant_id']}). –û–Ω –≤—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–º. –û—Ç–∫—Ä–æ–π—Ç–µ ¬´üë®‚Äçüç≥ –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞¬ª.")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.callback_query(F.data == "switch_rest")
async def switch_rest(cb: CallbackQuery):
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{BACKEND_URL}/my_restaurants", params={"telegram_id": cb.from_user.id})
        lst = r.json()
    except Exception as e:
        await cb.message.answer(f"–û—à–∏–±–∫–∞: {e}"); return await cb.answer()

    if not lst:
        await cb.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return await cb.answer()

    rows = [[InlineKeyboardButton(text=f"üçΩ {x['restaurant_name']} (id {x['id']})", callback_data=f"pick_rest:{x['id']}")] for x in lst]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_open")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await cb.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=kb)
    await cb.answer()

@dp.callback_query(F.data.startswith("pick_rest:"))
async def pick_rest(cb: CallbackQuery):
    rid = int(cb.data.split(":")[1])
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.post(f"{BACKEND_URL}/set_active_restaurant",
                                  params={"telegram_id": cb.from_user.id, "restaurant_id": rid})
        if r.status_code == 200:
            await cb.message.answer(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (id {rid}). –û—Ç–∫—Ä–æ–π—Ç–µ ¬´üë®‚Äçüç≥ –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞¬ª.")
        else:
            await cb.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω.")
    except Exception as e:
        await cb.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    await cb.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
