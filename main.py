import os, asyncio, json, urllib.parse as up
import aiosqlite
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, WebAppInfo,
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, Location
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiohttp import ClientSession

BOT_TOKEN   = os.getenv("BOT_TOKEN")
WEBAPP_URL  = os.getenv("WEBAPP_URL",  "https://foody-reg.vercel.app").rstrip("/")     # –¥–æ–º–µ–Ω –º–∏–Ω–∏-–∞–ø–ø–∞ (–æ–¥–∏–Ω!)
BACKEND_URL = os.getenv("BACKEND_URL", "https://foodyback-production.up.railway.app").rstrip("/")

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN is not set")

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp  = Dispatcher()

DB_PATH = "bot_data.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS restaurants (
            tg_id INTEGER PRIMARY KEY,
            name  TEXT,
            token TEXT  -- verification_token
        )
        """)
        await db.commit()

async def get_token(tg_id: int) -> str | None:
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cur = await db.execute("SELECT token FROM restaurants WHERE tg_id=?", (tg_id,))
        row = await cur.fetchone()
        return row["token"] if row and row["token"] else None

async def save_rest(tg_id: int, name: str, token: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO restaurants (tg_id, name, token) VALUES (?, ?, ?) "
            "ON CONFLICT(tg_id) DO UPDATE SET name=excluded.name, token=excluded.token",
            (tg_id, name, token)
        )
        await db.commit()

def kb_role() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω / –∫–∞—Ñ–µ", callback_data="role|rest")
    kb.button(text="üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å",    callback_data="role|buyer")
    kb.adjust(1, 1)
    return kb.as_markup()

def kb_webapp_lk(token: str) -> InlineKeyboardMarkup:
    # –õ–ö –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ –º–∏–Ω–∏-–∞–ø–ø; –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–¥–∏–Ω –¥–æ–º–µ–Ω —É –±–æ—Ç–∞ –≤ /setdomain!
    url = f"{WEBAPP_URL}/verify.html?token={token}&api={BACKEND_URL}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üîê –û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=url))
    kb.adjust(1)
    return kb.as_markup()

def kb_webapp_buyer() -> InlineKeyboardMarkup:
    # –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚Äî –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ /buyer/index.html –Ω–∞ —Ç–æ–º –∂–µ –¥–æ–º–µ–Ω–µ
    url = f"{WEBAPP_URL}/buyer/index.html?api={BACKEND_URL}"
    kb = InlineKeyboardBuilder()
    kb.button(text="üçî –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url=url))
    kb.adjust(1)
    return kb.as_markup()

class Onboard(StatesGroup):
    waiting_name = State()

@dp.message(CommandStart())
async def start_cmd(m: Message, state: FSMContext):
    await state.clear()
    # –ï—Å–ª–∏ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω ‚Äî —Å—Ä–∞–∑—É –¥–∞—ë–º –õ–ö
    token = await get_token(m.from_user.id)
    if token:
        await m.answer(
            "üçΩ <b>Foody</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb_webapp_lk(token)
        )
        await m.answer("–ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", reply_markup=kb_role())
        return
    # –ò–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
    await m.answer("üçΩ <b>Foody ‚Äî –≤–∫—É—Å–Ω–æ, –≤—ã–≥–æ–¥–Ω–æ, –±–µ–∑ –æ—Ç—Ö–æ–¥–æ–≤.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
                   reply_markup=kb_role())

@dp.callback_query(F.data == "role|buyer")
async def role_buyer(call: CallbackQuery):
    await call.message.edit_text("üë§ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ (–º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ).",
                                 reply_markup=kb_webapp_buyer())
    await call.answer()

@dp.callback_query(F.data == "role|rest")
async def role_rest(call: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω ‚Äî –µ—Å–ª–∏ –¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –õ–ö
    token = await get_token(call.from_user.id)
    if token:
        await call.message.edit_text("üè™ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –õ–ö:",
                                     reply_markup=kb_webapp_lk(token))
        await call.answer()
        return
    # –ò–Ω–∞—á–µ –±—ã—Å—Ç—Ä—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: —Å–ø—Ä–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    await state.set_state(Onboard.waiting_name)
    await call.message.edit_text("üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ö–æ—Ñ–µ–π–Ω—è ‚Ññ1¬ª):")
    await call.answer()

@dp.message(Onboard.waiting_name)
async def rest_name_entered(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if len(name) < 2:
        await m.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
        return
    email = f"rest_{m.from_user.id}@example.com"  # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π ¬´email¬ª
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–µ–∫–µ–Ω–¥–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    try:
        async with ClientSession() as sess:
            async with sess.post(f"{BACKEND_URL}/register_restaurant",
                                 params={"name": name, "email": email}) as resp:
                if resp.status != 200:
                    txt = await resp.text()
                    await m.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {txt}", reply_markup=ReplyKeyboardRemove())
                    await state.clear()
                    return
                data = await resp.json()
    except Exception as e:
        await m.answer(f"–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    link = data.get("verification_link", "")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º token –∏–∑ verification_link
    q = up.urlparse(link).query
    token = up.parse_qs(q).get("token", [None])[0] or (link.split("token=")[-1].split("&")[0] if "token=" in link else None)
    if not token:
        await m.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    await save_rest(m.from_user.id, name, token)

    await m.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞. –õ–ö –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∫–∞–∫ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram.",
                   reply_markup=ReplyKeyboardRemove())
    await m.answer("–û—Ç–∫—Ä—ã—Ç—å –õ–ö:", reply_markup=kb_webapp_lk(token))
    await state.clear()

@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    # –µ—Å–ª–∏ –º–∏–Ω–∏-–∞–ø–ø –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–∑–∞–¥
    try:
        payload = json.loads(m.web_app_data.data)
    except Exception:
        payload = m.web_app_data.data
    await m.answer(f"–ò–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–æ:\n<code>{payload}</code>")

@dp.message(Command("lk"))
async def cmd_lk(m: Message):
    token = await get_token(m.from_user.id)
    if not token:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´üè™ –†–µ—Å—Ç–æ—Ä–∞–Ω / –∫–∞—Ñ–µ¬ª –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    await m.answer("–û—Ç–∫—Ä—ã—Ç—å –õ–ö:", reply_markup=kb_webapp_lk(token))

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
