import os
import asyncio
from dataclasses import dataclass
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import (Message, CallbackQuery, InlineKeyboardMarkup,
                           InlineKeyboardButton, InputMediaPhoto)
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp

# ========= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ENV =========
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
BACKEND_API = os.getenv("BACKEND_API", "https://foodyback-production.up.railway.app")
WEBAPP_BUYER = os.getenv("WEBAPP_BUYER", "https://foody-buyer.vercel.app")
WEBAPP_REG = os.getenv("WEBAPP_REG", "https://foody-reg.vercel.app")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# ========= –ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ callback'–æ–≤ =========
@dataclass
class Actions:
    BUYER = "buyer"
    RESTO = "resto"
    OFFERS = "offers"
    RESERVE = "reserve"
    HELP = "help"

router = Router()

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =========
def start_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üõí –Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data=Actions.BUYER)
    kb.button(text="üè™ –Ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data=Actions.RESTO)
    kb.adjust(1)
    return kb.as_markup()

def buyer_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (WebApp)", url=WEBAPP_BUYER)
    kb.button(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=Actions.OFFERS)
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data=Actions.HELP)
    kb.adjust(1, 1, 1)
    return kb.as_markup()

def resto_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üßë‚Äçüç≥ –û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (WebApp)", url=WEBAPP_REG)
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data=Actions.HELP)
    kb.adjust(1, 1)
    return kb.as_markup()

def offer_kb(offer_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üì¶ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"{Actions.RESERVE}:{offer_id}")
    kb.adjust(1)
    return kb.as_markup()

# ========= API-–≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ =========
async def get_offers(session: aiohttp.ClientSession):
    url = f"{BACKEND_API}/offers"
    async with session.get(url, timeout=20) as r:
        r.raise_for_status()
        return await r.json()

async def reserve_offer(session: aiohttp.ClientSession, offer_id: int, buyer_name: Optional[str]):
    url = f"{BACKEND_API}/reserve"
    payload = {"offer_id": offer_id, "buyer_name": buyer_name}
    async with session.post(url, json=payload, timeout=20) as r:
        r.raise_for_status()
        return await r.json()

# ========= –•–µ–Ω–¥–ª–µ—Ä—ã =========
@router.message(CommandStart())
async def on_start(m: Message):
    text = (
        "üçΩ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Foody ‚Äî –≤–∫—É—Å–Ω–æ, –≤—ã–≥–æ–¥–Ω–æ, –±–µ–∑ –æ—Ç—Ö–æ–¥–æ–≤.\n\n"
        "–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?"
    )
    await m.answer(text, reply_markup=start_kb())

@router.callback_query(F.data == Actions.BUYER)
async def on_buyer(c: CallbackQuery):
    await c.message.edit_text(
        "üë§ –†–µ–∂–∏–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.\n"
        "‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ –µ–¥—É —Å–æ —Å–∫–∏–¥–∫–æ–π —Ä—è–¥–æ–º\n"
        "‚Äî –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=buyer_kb()
    )
    await c.answer()

@router.callback_query(F.data == Actions.RESTO)
async def on_resto(c: CallbackQuery):
    await c.message.edit_text(
        "üè™ –†–µ–∂–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n"
        "–û—Ç–∫—Ä–æ–π—Ç–µ –õ–ö, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
        reply_markup=resto_kb()
    )
    await c.answer()

@router.callback_query(F.data == Actions.HELP)
async def on_help(c: CallbackQuery):
    await c.message.answer(
        "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "‚Ä¢ –†–µ—Å—Ç–æ—Ä–∞–Ω –ø—É–±–ª–∏–∫—É–µ—Ç –∏–∑–ª–∏—à–∫–∏ –≤ –õ–ö (WebApp)\n"
        "‚Ä¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç –∏ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç\n"
        "‚Ä¢ –ù–∞ –≤—ã–¥–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–¥/–±—Ä–æ–Ω—å\n\n"
        "–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥: " + WEBAPP_BUYER + "\n"
        "–õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: " + WEBAPP_REG
    )
    await c.answer()

@router.callback_query(F.data == Actions.OFFERS)
async def on_offers(c: CallbackQuery, bot: Bot):
    await c.answer("–ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚Ä¶")
    async with aiohttp.ClientSession() as session:
        try:
            items = await get_offers(session)
        except Exception as e:
            await c.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    if not items:
        await c.message.answer("–ü–æ–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ WebApp: " + WEBAPP_BUYER)
        return

    # –ü–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–æ—á–µ–∫
    for o in items[:5]:
        title = o.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        restaurant = o.get("restaurant", "–†–µ—Å—Ç–æ—Ä–∞–Ω")
        price = o.get("price", 0)
        qty = o.get("quantity", 0)
        photo = o.get("photo_url")
        expires = o.get("expires_at", "")

        caption = (
            f"üçî <b>{title}</b>\n"
            f"üè∑ {restaurant}\n"
            f"üí∞ {price} ‚ÇΩ   ‚Ä¢   üßæ –û—Å—Ç–∞—Ç–æ–∫: {qty}\n"
        )
        kb = offer_kb(o["id"])
        try:
            if photo:
                await bot.send_photo(
                    chat_id=c.message.chat.id,
                    photo=photo,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=kb
                )
            else:
                await bot.send_message(
                    chat_id=c.message.chat.id,
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=kb
                )
        except Exception:
            # –µ—Å–ª–∏ URL —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=c.message.chat.id,
                text=caption,
                parse_mode="HTML",
                reply_markup=kb
            )

@router.callback_query(F.data.startswith(f"{Actions.RESERVE}:"))
async def on_reserve(c: CallbackQuery):
    _, offer_id_str = c.data.split(":")
    offer_id = int(offer_id_str)
    buyer_name = c.from_user.full_name

    async with aiohttp.ClientSession() as session:
        try:
            data = await reserve_offer(session, offer_id, buyer_name)
        except Exception:
            await c.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", show_alert=True)
            return

    code = data.get("code")
    until = data.get("expires_at", "")
    title = data.get("title", "")
    price = data.get("price", 0)
    restaurant = data.get("restaurant", "")

    text = (
        "‚úÖ –ë—Ä–æ–Ω—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        f"üçΩ <b>{title}</b>\n"
        f"üè™ {restaurant}\n"
        f"üí∞ {price} ‚ÇΩ\n"
        f"üîê –ö–æ–¥ –±—Ä–æ–Ω–∏: <code>{code}</code>\n"
        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {until}\n\n"
        "–ü–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –≤—ã–¥–∞—á–µ."
    )
    await c.message.answer(text, parse_mode="HTML")
    await c.answer()

# ========= –ó–∞–ø—É—Å–∫ =========
async def main():
    bot = Bot(BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
