import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
REG_WEBAPP_URL = os.getenv("REG_WEBAPP_URL", "http://localhost:5173")
BUYER_WEBAPP_URL = os.getenv("BUYER_WEBAPP_URL", "http://localhost:5174")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is not set")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode="HTML")

class Reg(StatesGroup):
    waiting_name = State()

class LinkFSM(StatesGroup):
    waiting_restaurant_id = State()

def buyer_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º",
            web_app=WebAppInfo(url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}")
        )
    ]])

def restaurant_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üë®‚Äçüç≥ –û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞",
                web_app=WebAppInfo(url=f"{REG_WEBAPP_URL}/index.html?api={BACKEND_URL}")
            )
        ],
        [InlineKeyboardButton(text="üßæ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω (1 —à–∞–≥)", callback_data="reg_start")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", web_app=WebAppInfo(url=f"{REG_WEBAPP_URL}/onboarding.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç Telegram –∫ –õ–ö", callback_data="link_tg")],
        [
            InlineKeyboardButton(
                text="üçΩ –ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è",
                web_app=WebAppInfo(url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}")
            )
        ],
    ])

@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    kb = buyer_menu()
    intro = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Foody</b>!\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º."
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            r = await client.get(f"{BACKEND_URL}/whoami", params={"telegram_id": m.from_user.id})
        if r.status_code == 200:
            data = r.json()
            kb = restaurant_menu()
            intro = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{data.get('restaurant_name','—Ä–µ—Å—Ç–æ—Ä–∞–Ω')}</b>!\n–û—Ç–∫—Ä–æ–π—Ç–µ –õ–ö, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞."
    except Exception:
        pass
    await m.answer(intro, reply_markup=kb)

@dp.message(Command("merchant"))
async def merchant(m: Message):
    await m.answer("–†–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:", reply_markup=restaurant_menu())

@dp.callback_query(F.data == "reg_start")
async def reg_start(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b> (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(Reg.waiting_name)
    await cb.answer()

@dp.message(Reg.waiting_name)
async def reg_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await m.answer("–°–æ–∑–¥–∞—ë–º –∞–∫–∫–∞—É–Ω—Ç‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/register_telegram",
                                  json={"name": name[:120], "telegram_id": str(m.from_user.id)})
            r.raise_for_status()
            data = r.json()
        await m.answer(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ—Å—Ç–æ—Ä–∞–Ω ¬´{data['restaurant_name']}¬ª (id {data['restaurant_id']}) —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω.\n"
            f"–û—Ç–∫—Ä–æ–π—Ç–µ –õ–ö –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å: /merchant ‚Üí ¬´‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å¬ª."
        )
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    await state.clear()

@dp.callback_query(F.data == "link_tg")
async def link_tg(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>:")
    await state.set_state(LinkFSM.waiting_restaurant_id)
    await cb.answer()

@dp.message(LinkFSM.waiting_restaurant_id)
async def do_link(m: Message, state: FSMContext):
    rid_raw = (m.text or "").strip()
    if not rid_raw.isdigit():
        return await m.answer("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID.")
    rid = int(rid_raw)
    tg_id = str(m.from_user.id)
    await m.answer("–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/link_telegram", json={"telegram_id": tg_id, "restaurant_id": rid})
            resp = r.json()
        if r.status_code == 200:
            await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ¬´{resp.get('restaurant_name','')}¬ª (id {resp.get('restaurant_id')}).\n–û—Ç–∫—Ä–æ–π—Ç–µ /merchant –¥–ª—è –õ–ö.")
        else:
            await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å: {resp}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.message(Command("menu"))
async def menu(m: Message):
    await m.answer("–ú–µ–Ω—é:", reply_markup=buyer_menu())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
