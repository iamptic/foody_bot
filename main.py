import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    WebAppInfo,
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
REG_WEBAPP_URL = os.getenv("REG_WEBAPP_URL", "http://localhost:5173")
BUYER_WEBAPP_URL = os.getenv("BUYER_WEBAPP_URL", "http://localhost:5174")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is not set")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode="HTML")

class Reg(StatesGroup):
    waiting_name = State()
    waiting_email = State()

class LinkFSM(StatesGroup):
    waiting_restaurant_id = State()

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º", web_app=WebAppInfo(url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="üë®‚Äçüç≥ –û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", web_app=WebAppInfo(url=f"{REG_WEBAPP_URL}/index.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="reg_start")],
        [InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç Telegram –∫ –õ–ö", callback_data="link_tg")],
    ])

@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Foody</b>!\n"
        "‚Äî –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: —Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º (Mini App).\n"
        "‚Äî –†–µ—Å—Ç–æ—Ä–∞–Ω—É: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å/–≤–æ–π–¥–∏—Ç–µ (Mini App).\n"
        "‚Äî –ü—Ä–∏–≤—è–∂–∏—Ç–µ —ç—Ç–æ—Ç Telegram –∫ –õ–ö –¥–ª—è –∞–≤—Ç–æ-–≤—Ö–æ–¥–∞.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "reg_start")
async def reg_start(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>:")
    await state.set_state(Reg.waiting_name)
    await cb.answer()

@dp.message(Reg.waiting_name)
async def reg_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(name=name)
    await state.set_state(Reg.waiting_email)
    await m.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>email</b> –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")

@dp.message(Reg.waiting_email)
async def reg_email(m: Message, state: FSMContext):
    email = (m.text or "").strip()
    if "@" not in email or "." not in email:
        return await m.answer("–ü–æ—Ö–æ–∂–µ –Ω–µ email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
    data = await state.get_data()
    name = data["name"]
    await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/register_restaurant", params={"name": name, "email": email})
            r.raise_for_status()
            resp = r.json()
        link = resp.get("verification_link")
        rid = resp.get("restaurant_id")
        if link:
            await m.answer(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –õ–ö –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ:\n{link}\n\n"
                f"ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: <code>{rid}</code>"
            )
        else:
            await m.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {resp}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    await state.clear()

@dp.callback_query(F.data == "link_tg")
async def link_tg(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b> (–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –µ–≥–æ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏):")
    await state.set_state(LinkFSM.waiting_restaurant_id)
    await cb.answer()

@dp.message(LinkFSM.waiting_restaurant_id)
async def do_link(m: Message, state: FSMContext):
    rid_raw = (m.text or "").strip()
    if not rid_raw.isdigit():
        return await m.answer("–ù—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    rid = int(rid_raw)
    tg_id = str(m.from_user.id)
    await m.answer("–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/link_telegram", json={"telegram_id": tg_id, "restaurant_id": rid})
            resp = r.json()
        if r.status_code == 200:
            await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ ¬´{resp.get('restaurant_name','')}¬ª (id {resp.get('restaurant_id')}).\n"
                           f"–¢–µ–ø–µ—Ä—å –õ–ö –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ Mini App –±–µ–∑ —Ç–æ–∫–µ–Ω–∞.")
        else:
            await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å: {resp}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.message(Command("menu"))
async def menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
