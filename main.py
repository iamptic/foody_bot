import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
REG_WEBAPP_URL = os.getenv("REG_WEBAPP_URL", "http://localhost:5173")
BUYER_WEBAPP_URL = os.getenv("BUYER_WEBAPP_URL", "http://localhost:5174")

if not BOT_TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is not set")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode="HTML")

class Reg(StatesGroup):
    waiting_name = State()
    waiting_email = State()

def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üçΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º", url=f"{BUYER_WEBAPP_URL}/index.html?api={BACKEND_URL}"),
    ],[
        InlineKeyboardButton(text="üë®‚Äçüç≥ –û—Ç–∫—Ä—ã—Ç—å –õ–ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ (–µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç)", url=f"{REG_WEBAPP_URL}/index.html?api={BACKEND_URL}")
    ],[
        InlineKeyboardButton(text="üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", callback_data="reg_start")
    ]])
    return kb

@dp.message(CommandStart())
async def start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Foody</b>!\n"
        "‚Äî –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: —Å–º–æ—Ç—Ä–∏—Ç–µ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä—è–¥–æ–º.\n"
        "‚Äî –†–µ—Å—Ç–æ—Ä–∞–Ω—É: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.callback_query(F.data == "reg_start")
async def reg_start(cb, state: FSMContext):
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>:")
    await state.set_state(Reg.waiting_name)
    await cb.answer()

@dp.message(Reg.waiting_name)
async def reg_name(m: Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(name=name)
    await state.set_state(Reg.waiting_email)
    await m.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>email</b> –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:")

@dp.message(Reg.waiting_email)
async def reg_email(m: Message, state: FSMContext):
    email = (m.text or "").strip()
    if "@" not in email or "." not in email:
        return await m.answer("–ü–æ—Ö–æ–∂–µ –Ω–µ email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å.")
    data = await state.get_data()
    name = data["name"]
    await m.answer("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º‚Ä¶")
    try:
        async with httpx.AsyncClient(timeout=15.0) as client:
            r = await client.post(f"{BACKEND_URL}/register_restaurant", params={"name": name, "email": email})
            r.raise_for_status()
            resp = r.json()
        link = resp.get("verification_link")
        rid = resp.get("restaurant_id")
        if link:
            await m.answer(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, –∑–∞—Ç–µ–º –ø–æ–ø–∞–¥—ë—Ç–µ –≤ –õ–ö:\n{link}\n\n"
                f"ID —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: <code>{rid}</code>"
            )
        else:
            await m.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {resp}")
    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
    await state.clear()

@dp.message(Command("menu"))
async def menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
