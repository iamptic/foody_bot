import os
import asyncio
from aiohttp import ClientSession
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
BACKEND_URL = os.getenv("BACKEND_URL", "").rstrip("/")
WEBAPP_URL = os.getenv("WEBAPP_URL", "").rstrip("/")
BUYER_URL = os.getenv("BUYER_URL", "").rstrip("/")

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN is not set. Add it to .env or environment variables.")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(BOT_TOKEN, parse_mode="HTML")

def start_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè™ –Ø —Ä–µ—Å—Ç–æ—Ä–∞–Ω/–∫–∞—Ñ–µ", callback_data="role_restaurant")],
        [InlineKeyboardButton(text="üë§ –Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data="role_buyer")]
    ])

def restaurant_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è / –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="rest_register")],
        [InlineKeyboardButton(text="üìã –û—Ç–∫—Ä—ã—Ç—å –õ–ö (WebApp)", web_app=WebAppInfo(url=f"{WEBAPP_URL}/index.html?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="rest_help")]
    ])

def buyer_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üçî –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (WebApp)", web_app=WebAppInfo(url=f"{BUYER_URL}?api={BACKEND_URL}"))],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="buyer_help")]
    ])

class RegForm(StatesGroup):
    waiting_name = State()
    waiting_email = State()

@dp.message(CommandStart())
async def on_start(message: Message):
    await message.answer(
        "üçΩ <b>Foody</b> ‚Äî –≤–∫—É—Å–Ω–æ, –≤—ã–≥–æ–¥–Ω–æ, –±–µ–∑ –æ—Ç—Ö–æ–¥–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
        reply_markup=start_kb()
    )

@dp.callback_query(F.data == "role_restaurant")
async def role_restaurant(c: CallbackQuery):
    await c.message.edit_text("üè™ <b>Foody –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤</b>
‚Äî –†–∞–∑–º–µ—â–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Äî –°–º–æ—Ç—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏
‚Äî –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", reply_markup=restaurant_menu_kb())
    await c.answer()

@dp.callback_query(F.data == "role_buyer")
async def role_buyer(c: CallbackQuery):
    await c.message.edit_text("üë§ <b>Foody –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π</b>
‚Äî –ò—â–∏—Ç–µ –µ–¥—É —Å–æ —Å–∫–∏–¥–∫–æ–π —Ä—è–¥–æ–º
‚Äî –†–µ–∑–µ—Ä–≤–∏—Ä—É–π—Ç–µ –∏ –∑–∞–±–∏—Ä–∞–π—Ç–µ –≤–æ–≤—Ä–µ–º—è", reply_markup=buyer_menu_kb())
    await c.answer()

@dp.callback_query(F.data == "rest_help")
async def rest_help(c: CallbackQuery):
    await c.answer()
    await c.message.answer("‚ÑπÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>
1) –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ email.
2) –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –õ–ö.
3) –í –õ–ö –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —Ü–µ–Ω—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.
4) –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –æ—Ñ—Ñ–µ—Ä –∏ —Å–º–æ–≥—É—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.")

@dp.callback_query(F.data == "buyer_help")
async def buyer_help(c: CallbackQuery):
    await c.answer()
    await c.message.answer("‚ÑπÔ∏è <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç</b>
1) –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –Ω–∞–π–¥–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
2) –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –Ω–∞ –∫–∞—Å—Å–µ.
3) –ë—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

@dp.callback_query(F.data == "rest_register")
async def rest_register(c: CallbackQuery, state: FSMContext):
    await c.answer()
    await state.set_state(RegForm.waiting_name)
    await c.message.answer("üßæ –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞</b>:")

@dp.message(RegForm.waiting_name)
async def reg_name(message: Message, state: FSMContext):
    name = (message.text or "").strip()
    if len(name) < 2:
        return await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
    await state.update_data(name=name)
    await state.set_state(RegForm.waiting_email)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ <b>email</b> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –õ–ö:")

@dp.message(RegForm.waiting_email)
async def reg_email(message: Message, state: FSMContext):
    email = (message.text or "").strip()
    if "@" not in email:
        return await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
    data = await state.get_data()
    name = data.get("name")
    await state.clear()
    await message.answer("‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º‚Ä¶")
    try:
        async with ClientSession() as sess:
            url = f"{BACKEND_URL}/register_restaurant"
            params = {"name": name, "email": email}
            async with sess.post(url, params=params) as resp:
                js = await resp.json()
        link = js.get("verification_link")
        if not link:
            return await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {js}")
        await message.answer(f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>
–†–µ—Å—Ç–æ—Ä–∞–Ω: <b>{name}</b>
Email: <code>{email}</code>
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –õ–ö", url=link)]]))
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å: {e}")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã:
/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî –ø–æ–º–æ—â—å")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
