# -*- coding: utf-8 -*-
"""
main_webhook.py ‚Äî –Ω–∞–¥—ë–∂–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è aiogram v3 + FastAPI webhook.
–ü–æ–ª–æ–∂–∏ —Ñ–∞–π–ª –≤ –ö–û–†–ï–ù–¨ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π:
    python main_webhook.py
ENV:
  BOT_TOKEN           ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
  BACKEND_PUBLIC      ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π URL Railway (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://foodybot-production.up.railway.app)
  WEBAPP_MERCHANT_URL ‚Äî https://foody-reg.vercel.app (–æ–ø—Ü. –¥–ª—è /start)
  WEBAPP_BUYER_URL    ‚Äî https://foody-buyer.vercel.app (–æ–ø—Ü. –¥–ª—è /start)
  API_URL             ‚Äî https://foodyback-production.up.railway.app (–æ–ø—Ü., –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ web-app –∫–Ω–æ–ø–∫–∏)
"""
import os, sys, asyncio, json
from contextlib import asynccontextmanager
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, Update, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

# --- ENV ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise SystemExit("BOT_TOKEN env is required")

BACKEND_PUBLIC = os.getenv("BACKEND_PUBLIC", "").rstrip("/")
WEBAPP_MERCHANT_URL = os.getenv("WEBAPP_MERCHANT_URL", "https://foody-reg.vercel.app")
WEBAPP_BUYER_URL = os.getenv("WEBAPP_BUYER_URL", "https://foody-buyer.vercel.app")
API_URL = os.getenv("API_URL", "https://foodyback-production.up.railway.app")

# --- Aiogram core ---
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(F.text.in_({"/start", "start"}))
async def cmd_start(m: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        [InlineKeyboardButton(text="üë®‚Äçüç≥ –õ–ö –ø–∞—Ä—Ç–Ω—ë—Ä–∞", web_app=WebAppInfo(url=f"{WEBAPP_MERCHANT_URL}/?api={API_URL}"))],
        [InlineKeyboardButton(text="üçΩ –î–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", web_app=WebAppInfo(url=f"{WEBAPP_BUYER_URL}/?api={API_URL}"))],
        [InlineKeyboardButton(text="üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", web_app=WebAppInfo(url=f"{WEBAPP_MERCHANT_URL}/docs/index.html"))],
    ]])
    await m.answer("Foody: —Å–ø–∞—Å–∞–µ–º –µ–¥—É –≤–º–µ—Å—Ç–µ.\n–ö–æ–º–∞–Ω–¥—ã: /offer /rules", reply_markup=kb)

# –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ /offer –∏ /rules (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ extras_commands –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
@dp.message(F.text == "/offer")
async def cmd_offer(m: Message):
    await m.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
        [InlineKeyboardButton(text="üìÑ –û—Ñ—Ñ–µ—Ä (SMB)", url=f"{WEBAPP_MERCHANT_URL}/docs/docs/Foody_Offer_Brand_ru.pdf")],
        [InlineKeyboardButton(text="üè¨ –û—Ñ—Ñ–µ—Ä –¥–ª—è —Å–µ—Ç–µ–π", url=f"{WEBAPP_MERCHANT_URL}/docs/docs/Foody_Offer_Chain_ru.pdf")],
        [InlineKeyboardButton(text="üìä ROI-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", url=f"{WEBAPP_MERCHANT_URL}/docs/docs/ROI_%D0%A1%D0%BF%D0%B0%D1%81%D0%B5%D0%BD%D0%B8%D0%B5%D0%95%D0%B4%D1%8B_%D0%BA%D0%B0%D0%BB%D1%8C%D0%BA%D1%83%D0%BB%D1%8F%D1%82%D0%BE%D1%80.xlsx")]
    ]]))

@dp.message(F.text == "/rules")
async def cmd_rules(m: Message):
    await m.answer("–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
        [InlineKeyboardButton(text="üìò –û—Ç–∫—Ä—ã—Ç—å", web_app=WebAppInfo(url=f"{WEBAPP_MERCHANT_URL}/docs/rules.html"))]
    ]]))

# –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å ‚Äî —ç—Ç–æ –ù–ï –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
try:
    from extras_commands import router as extras_router
    dp.include_router(extras_router)
except Exception as e:
    print("[main_webhook] extras_commands not loaded:", e)

# --- FastAPI ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    print(">>> Bot webhook app starting")
    yield
    print(">>> Bot webhook app stopped")

app = FastAPI(lifespan=lifespan)

@app.get("/health")
def health():
    return {"ok": True, "file": __file__}

@app.post("/tg/webhook")
async def tg_webhook(request: Request):
    data = await request.json()
    try:
        update = Update.model_validate(data)
    except Exception as e:
        # –õ–æ–≥–∏ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ Telegram Update
        return JSONResponse({"ok": False, "error": f"bad update: {e}", "data": data}, status_code=400)
    await dp.feed_update(bot, update)
    return {"ok": True}

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "8000"))
    uvicorn.run("main_webhook:app", host="0.0.0.0", port=port)
